/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PatientsIndexRouteImport } from './routes/patients/index'
import { Route as AppointmentsIndexRouteImport } from './routes/appointments/index'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as PatientsNewRouteImport } from './routes/patients/new'
import { Route as PatientsPatientIdRouteImport } from './routes/patients/$patientId'
import { Route as AppointmentsNewRouteImport } from './routes/appointments/new'
import { Route as AppointmentsAppointmentIdRouteImport } from './routes/appointments/$appointmentId'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as authAdminLoginRouteImport } from './routes/(auth)/admin-login'
import { Route as appAboutRouteImport } from './routes/(app)/about'

const PatientsIndexRoute = PatientsIndexRouteImport.update({
  id: '/patients/',
  path: '/patients/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppointmentsIndexRoute = AppointmentsIndexRouteImport.update({
  id: '/appointments/',
  path: '/appointments/',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/(app)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PatientsNewRoute = PatientsNewRouteImport.update({
  id: '/patients/new',
  path: '/patients/new',
  getParentRoute: () => rootRouteImport,
} as any)
const PatientsPatientIdRoute = PatientsPatientIdRouteImport.update({
  id: '/patients/$patientId',
  path: '/patients/$patientId',
  getParentRoute: () => rootRouteImport,
} as any)
const AppointmentsNewRoute = AppointmentsNewRouteImport.update({
  id: '/appointments/new',
  path: '/appointments/new',
  getParentRoute: () => rootRouteImport,
} as any)
const AppointmentsAppointmentIdRoute =
  AppointmentsAppointmentIdRouteImport.update({
    id: '/appointments/$appointmentId',
    path: '/appointments/$appointmentId',
    getParentRoute: () => rootRouteImport,
  } as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const authAdminLoginRoute = authAdminLoginRouteImport.update({
  id: '/(auth)/admin-login',
  path: '/admin-login',
  getParentRoute: () => rootRouteImport,
} as any)
const appAboutRoute = appAboutRouteImport.update({
  id: '/(app)/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/about': typeof appAboutRoute
  '/admin-login': typeof authAdminLoginRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/appointments/$appointmentId': typeof AppointmentsAppointmentIdRoute
  '/appointments/new': typeof AppointmentsNewRoute
  '/patients/$patientId': typeof PatientsPatientIdRoute
  '/patients/new': typeof PatientsNewRoute
  '/': typeof appIndexRoute
  '/appointments': typeof AppointmentsIndexRoute
  '/patients': typeof PatientsIndexRoute
}
export interface FileRoutesByTo {
  '/about': typeof appAboutRoute
  '/admin-login': typeof authAdminLoginRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/appointments/$appointmentId': typeof AppointmentsAppointmentIdRoute
  '/appointments/new': typeof AppointmentsNewRoute
  '/patients/$patientId': typeof PatientsPatientIdRoute
  '/patients/new': typeof PatientsNewRoute
  '/': typeof appIndexRoute
  '/appointments': typeof AppointmentsIndexRoute
  '/patients': typeof PatientsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)/about': typeof appAboutRoute
  '/(auth)/admin-login': typeof authAdminLoginRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/appointments/$appointmentId': typeof AppointmentsAppointmentIdRoute
  '/appointments/new': typeof AppointmentsNewRoute
  '/patients/$patientId': typeof PatientsPatientIdRoute
  '/patients/new': typeof PatientsNewRoute
  '/(app)/': typeof appIndexRoute
  '/appointments/': typeof AppointmentsIndexRoute
  '/patients/': typeof PatientsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/about'
    | '/admin-login'
    | '/login'
    | '/signup'
    | '/appointments/$appointmentId'
    | '/appointments/new'
    | '/patients/$patientId'
    | '/patients/new'
    | '/'
    | '/appointments'
    | '/patients'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/admin-login'
    | '/login'
    | '/signup'
    | '/appointments/$appointmentId'
    | '/appointments/new'
    | '/patients/$patientId'
    | '/patients/new'
    | '/'
    | '/appointments'
    | '/patients'
  id:
    | '__root__'
    | '/(app)/about'
    | '/(auth)/admin-login'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/appointments/$appointmentId'
    | '/appointments/new'
    | '/patients/$patientId'
    | '/patients/new'
    | '/(app)/'
    | '/appointments/'
    | '/patients/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appAboutRoute: typeof appAboutRoute
  authAdminLoginRoute: typeof authAdminLoginRoute
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
  AppointmentsAppointmentIdRoute: typeof AppointmentsAppointmentIdRoute
  AppointmentsNewRoute: typeof AppointmentsNewRoute
  PatientsPatientIdRoute: typeof PatientsPatientIdRoute
  PatientsNewRoute: typeof PatientsNewRoute
  appIndexRoute: typeof appIndexRoute
  AppointmentsIndexRoute: typeof AppointmentsIndexRoute
  PatientsIndexRoute: typeof PatientsIndexRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/patients/': {
      id: '/patients/'
      path: '/patients'
      fullPath: '/patients'
      preLoaderRoute: typeof PatientsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/appointments/': {
      id: '/appointments/'
      path: '/appointments'
      fullPath: '/appointments'
      preLoaderRoute: typeof AppointmentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patients/new': {
      id: '/patients/new'
      path: '/patients/new'
      fullPath: '/patients/new'
      preLoaderRoute: typeof PatientsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patients/$patientId': {
      id: '/patients/$patientId'
      path: '/patients/$patientId'
      fullPath: '/patients/$patientId'
      preLoaderRoute: typeof PatientsPatientIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/appointments/new': {
      id: '/appointments/new'
      path: '/appointments/new'
      fullPath: '/appointments/new'
      preLoaderRoute: typeof AppointmentsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/appointments/$appointmentId': {
      id: '/appointments/$appointmentId'
      path: '/appointments/$appointmentId'
      fullPath: '/appointments/$appointmentId'
      preLoaderRoute: typeof AppointmentsAppointmentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/admin-login': {
      id: '/(auth)/admin-login'
      path: '/admin-login'
      fullPath: '/admin-login'
      preLoaderRoute: typeof authAdminLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/about': {
      id: '/(app)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof appAboutRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  appAboutRoute: appAboutRoute,
  authAdminLoginRoute: authAdminLoginRoute,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
  AppointmentsAppointmentIdRoute: AppointmentsAppointmentIdRoute,
  AppointmentsNewRoute: AppointmentsNewRoute,
  PatientsPatientIdRoute: PatientsPatientIdRoute,
  PatientsNewRoute: PatientsNewRoute,
  appIndexRoute: appIndexRoute,
  AppointmentsIndexRoute: AppointmentsIndexRoute,
  PatientsIndexRoute: PatientsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
